# iniciar_genesys.ps1
# Comando MASTER para gerenciar Genesys como servi√ßo Windows

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("start", "stop", "restart", "status", "install", "remove", "monitor")]
    [string]$Action = "start",
    
    [Parameter(Mandatory=$false)]
    [switch]$Service,
    
    [Parameter(Mandatory=$false)]
    [switch]$Monitor,
    
    [Parameter(Mandatory=$false)]
    [switch]$Background,
    
    [Parameter(Mandatory=$false)]
    [switch]$Force,
    
    [Parameter(Mandatory=$false)]
    [int]$Port = 8002,
    
    [Parameter(Mandatory=$false)]
    [string]$Host = "0.0.0.0"
)

# Configura√ß√µes
$ServiceName = "GenesysAI"
$ProjectRoot = $PSScriptRoot
$ServiceScript = Join-Path $ProjectRoot "scripts\setup_genesys_service.ps1"
$MonitorScript = Join-Path $ProjectRoot "scripts\monitor_genesys_independente.py"
$OldStartScript = Join-Path $ProjectRoot "start_genesys.ps1"

Write-Host "üöÄ GENESYS AI - COMANDO MASTER" -ForegroundColor Cyan
Write-Host "=" * 50
Write-Host "A√ß√£o: $Action" -ForegroundColor Yellow
Write-Host ""

# Fun√ß√£o para verificar se est√° rodando como admin
function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Fun√ß√£o para verificar se servi√ßo existe
function Test-ServiceExists {
    $service = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue
    return $service -ne $null
}

# Fun√ß√£o para verificar se servi√ßo est√° rodando
function Test-ServiceRunning {
    $service = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue
    return $service -and $service.Status -eq "Running"
}

# Fun√ß√£o para testar API
function Test-API {
    param([string]$Url = "http://localhost:$Port")
    
    try {
        $response = Invoke-WebRequest -Uri "$Url/" -UseBasicParsing -TimeoutSec 5
        return $response.StatusCode -eq 200
    } catch {
        return $false
    }
}

# Fun√ß√£o principal para detectar e iniciar
function Start-GenesysIntelligent {
    Write-Host "üß† DETEC√á√ÉO INTELIGENTE DO SISTEMA" -ForegroundColor Cyan
    Write-Host "-" * 40
    
    $serviceExists = Test-ServiceExists
    $serviceRunning = Test-ServiceRunning
    $apiResponding = Test-API
    
    Write-Host "üîç Status atual:" -ForegroundColor Yellow
    Write-Host "  üì¶ Servi√ßo instalado: $(if($serviceExists){'‚úÖ SIM'}else{'‚ùå N√ÉO'})"
    Write-Host "  ‚ñ∂Ô∏è Servi√ßo rodando: $(if($serviceRunning){'‚úÖ SIM'}else{'‚ùå N√ÉO'})"
    Write-Host "  üåê API respondendo: $(if($apiResponding){'‚úÖ SIM'}else{'‚ùå N√ÉO'})"
    Write-Host ""
    
    # Decis√£o inteligente
    if ($apiResponding) {
        Write-Host "‚úÖ GENESYS J√Å EST√Å ATIVO E RESPONDENDO!" -ForegroundColor Green
        Write-Host "üåê URL Local: http://localhost:$Port" -ForegroundColor Cyan
        Write-Host "üåç URL Remoto: https://genesys.webcreations.com.br" -ForegroundColor Cyan
        
        if ($Monitor) {
            Write-Host ""
            Write-Host "üìä Iniciando monitor..." -ForegroundColor Yellow
            Start-Monitor
        }
        return $true
    }
    
    if (-not $serviceExists) {
        Write-Host "üîß INSTALANDO SERVI√áO..." -ForegroundColor Yellow
        
        if (-not (Test-Administrator)) {
            Write-Host "‚ùå Precisa de privil√©gios de administrador para instalar servi√ßo" -ForegroundColor Red
            Write-Host "üí° Execute como administrador ou use modo manual:" -ForegroundColor Yellow
            Write-Host "   .\iniciar_genesys.ps1 -Action manual" -ForegroundColor Cyan
            return $false
        }
        
        $installResult = & $ServiceScript -Action install -Port $Port -Host $Host
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Falha ao instalar servi√ßo" -ForegroundColor Red
            return $false
        }
        
        Write-Host "‚úÖ Servi√ßo instalado!" -ForegroundColor Green
    }
    
    if (-not $serviceRunning) {
        Write-Host "üöÄ INICIANDO SERVI√áO..." -ForegroundColor Yellow
        
        $startResult = & $ServiceScript -Action start
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Falha ao iniciar servi√ßo" -ForegroundColor Red
            return $false
        }
        
        # Aguardar inicializa√ß√£o
        Write-Host "‚è≥ Aguardando inicializa√ß√£o da API..." -ForegroundColor Yellow
        $attempts = 0
        $maxAttempts = 30
        
        do {
            Start-Sleep 2
            $attempts++
            $apiResponding = Test-API
            Write-Host "." -NoNewline -ForegroundColor Yellow
        } while (-not $apiResponding -and $attempts -lt $maxAttempts)
        
        Write-Host ""
        
        if ($apiResponding) {
            Write-Host "‚úÖ GENESYS INICIADO COM SUCESSO!" -ForegroundColor Green
            Write-Host "üåê URL Local: http://localhost:$Port" -ForegroundColor Cyan
            Write-Host "üåç URL Remoto: https://genesys.webcreations.com.br" -ForegroundColor Cyan
        } else {
            Write-Host "‚ö†Ô∏è Servi√ßo iniciou mas API ainda n√£o responde" -ForegroundColor Yellow
            Write-Host "üí° Aguarde alguns minutos para carregamento do modelo" -ForegroundColor Cyan
        }
    }
    
    if ($Monitor) {
        Write-Host ""
        Write-Host "üìä Iniciando monitor..." -ForegroundColor Yellow
        Start-Monitor
    }
    
    return $true
}

# Fun√ß√£o para iniciar monitor
function Start-Monitor {
    Write-Host "üìä INICIANDO MONITOR INDEPENDENTE" -ForegroundColor Cyan
    Write-Host "-" * 40
    
    if ($Background) {
        Write-Host "üîÑ Executando monitor em background..." -ForegroundColor Yellow
        Start-Process -FilePath "python" -ArgumentList "$MonitorScript --background" -NoNewWindow
        Write-Host "‚úÖ Monitor iniciado em background" -ForegroundColor Green
    } else {
        Write-Host "üñ•Ô∏è Executando monitor interativo..." -ForegroundColor Yellow
        Write-Host "üí° Feche esta janela para parar o monitor" -ForegroundColor Cyan
        Write-Host ""
        & python $MonitorScript
    }
}

# Fun√ß√£o para modo manual (compatibilidade)
function Start-GenesysManual {
    Write-Host "üîß MODO MANUAL (COMPATIBILIDADE)" -ForegroundColor Yellow
    Write-Host "-" * 40
    Write-Host "üí° Executando modo tradicional do terminal..." -ForegroundColor Cyan
    Write-Host ""
    
    if (Test-Path $OldStartScript) {
        & $OldStartScript
    } else {
        Write-Host "‚ùå Script manual n√£o encontrado: $OldStartScript" -ForegroundColor Red
        Write-Host "üí° Use o modo servi√ßo: .\iniciar_genesys.ps1" -ForegroundColor Yellow
    }
}

# Fun√ß√£o principal de a√ß√£o
function Invoke-Action {
    switch ($Action.ToLower()) {
        "start" {
            if ($Service -or (Test-ServiceExists)) {
                Start-GenesysIntelligent
            } else {
                Write-Host "üéØ MODO PREFERIDO: SERVI√áO WINDOWS" -ForegroundColor Magenta
                Write-Host "Para usar como servi√ßo (recomendado):" -ForegroundColor White
                Write-Host "  .\iniciar_genesys.ps1 -Service" -ForegroundColor Cyan
                Write-Host ""
                Write-Host "üîß Executando modo manual..." -ForegroundColor Yellow
                Start-GenesysManual
            }
        }
        
        "stop" {
            if (Test-ServiceExists) {
                Write-Host "‚èπÔ∏è Parando servi√ßo..." -ForegroundColor Yellow
                & $ServiceScript -Action stop
            } else {
                Write-Host "‚ùå Servi√ßo n√£o est√° instalado" -ForegroundColor Red
            }
        }
        
        "restart" {
            if (Test-ServiceExists) {
                Write-Host "üîÑ Reiniciando servi√ßo..." -ForegroundColor Yellow
                & $ServiceScript -Action restart
            } else {
                Write-Host "‚ùå Servi√ßo n√£o est√° instalado" -ForegroundColor Red
            }
        }
        
        "status" {
            if (Test-ServiceExists) {
                & $ServiceScript -Action status
            } else {
                Write-Host "‚ùå Servi√ßo n√£o est√° instalado" -ForegroundColor Red
                Write-Host "üí° Para instalar: .\iniciar_genesys.ps1 -Action install" -ForegroundColor Yellow
            }
        }
        
        "install" {
            if (-not (Test-Administrator)) {
                Write-Host "‚ùå Precisa de privil√©gios de administrador" -ForegroundColor Red
                return
            }
            Write-Host "üì¶ Instalando servi√ßo..." -ForegroundColor Yellow
            & $ServiceScript -Action install -Port $Port -Host $Host
        }
        
        "remove" {
            if (-not (Test-Administrator)) {
                Write-Host "‚ùå Precisa de privil√©gios de administrador" -ForegroundColor Red
                return
            }
            Write-Host "üóëÔ∏è Removendo servi√ßo..." -ForegroundColor Red
            & $ServiceScript -Action remove
        }
        
        "monitor" {
            Start-Monitor
        }
        
        "manual" {
            Start-GenesysManual
        }
        
        default {
            Write-Host "‚ùå A√ß√£o inv√°lida: $Action" -ForegroundColor Red
        }
    }
}

# Menu de ajuda
function Show-Help {
    Write-Host ""
    Write-Host "üéØ COMANDOS DISPON√çVEIS:" -ForegroundColor Magenta
    Write-Host ""
    Write-Host "üöÄ B√ÅSICOS:" -ForegroundColor Cyan
    Write-Host "  .\iniciar_genesys.ps1                    # Detecta e inicia automaticamente"
    Write-Host "  .\iniciar_genesys.ps1 -Service           # For√ßa modo servi√ßo"
    Write-Host "  .\iniciar_genesys.ps1 -Monitor           # Inicia com monitor"
    Write-Host "  .\iniciar_genesys.ps1 -Action status     # Ver status"
    Write-Host ""
    Write-Host "üîß GERENCIAMENTO:" -ForegroundColor Cyan
    Write-Host "  .\iniciar_genesys.ps1 -Action install    # Instalar servi√ßo (como admin)"
    Write-Host "  .\iniciar_genesys.ps1 -Action start      # Iniciar servi√ßo"
    Write-Host "  .\iniciar_genesys.ps1 -Action stop       # Parar servi√ßo"
    Write-Host "  .\iniciar_genesys.ps1 -Action restart    # Reiniciar servi√ßo"
    Write-Host "  .\iniciar_genesys.ps1 -Action remove     # Remover servi√ßo (como admin)"
    Write-Host ""
    Write-Host "üìä MONITORAMENTO:" -ForegroundColor Cyan
    Write-Host "  .\iniciar_genesys.ps1 -Action monitor    # Monitor interativo"
    Write-Host "  .\iniciar_genesys.ps1 -Monitor -Background # Monitor em background"
    Write-Host ""
    Write-Host "‚öôÔ∏è OP√á√ïES:" -ForegroundColor Cyan
    Write-Host "  -Port 8002                               # Porta customizada"
    Write-Host "  -Host 0.0.0.0                           # Host customizado"
    Write-Host "  -Force                                   # For√ßar opera√ß√£o"
    Write-Host ""
    Write-Host "üí° EXEMPLOS:" -ForegroundColor Yellow
    Write-Host "  .\iniciar_genesys.ps1 -Service -Monitor  # Servi√ßo + Monitor"
    Write-Host "  .\iniciar_genesys.ps1 -Action manual     # Modo terminal tradicional"
    Write-Host ""
}

# Executar a√ß√£o principal
try {
    if ($args -contains "--help" -or $args -contains "-h") {
        Show-Help
        exit 0
    }
    
    Invoke-Action
    
    if ($Action -eq "start" -and (Test-API)) {
        Write-Host ""
        Write-Host "üéâ GENESYS EST√Å PRONTO!" -ForegroundColor Green
        Write-Host "=" * 30
        Write-Host "üåê Local:  http://localhost:$Port" -ForegroundColor Cyan
        Write-Host "üåç Remoto: https://genesys.webcreations.com.br" -ForegroundColor Cyan
        Write-Host "üìö Docs:   http://localhost:$Port/docs" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "üéÆ Para monitorar: .\iniciar_genesys.ps1 -Action monitor" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå Erro: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}